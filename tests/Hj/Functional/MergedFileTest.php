<?php

namespace Hj\Functional;

use Hj\ConfigHeaderValidator;
use Hj\Extractor;
use Hj\File\HostFile;
use Hj\File\MergedFile;
use Hj\File\ReceiverFile;
use Hj\Processor;
use Hj\Validator\YamlFile\KeyValueValidator\ConfigFileValidator;
use Hj\YamlConfigLoader;
use Monolog\Logger;
use ParseCsv\Csv;
use PHPUnit\Framework\TestCase;

class MergedFileTest extends TestCase
{
    /**
     * @var Logger
     */
    private $logger;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->logger = new Logger('test');
    }

    public function testCreateWithExtractorWithoutSuccessor()
    {
        $csvTestFilesBasePath = __DIR__ . '/csvFiles/';
        // we have to empty the file for the purposes of the test
        file_put_contents($csvTestFilesBasePath . 'merged.csv', '');

        $mergedFile = $this->buildMergedFile($csvTestFilesBasePath . 'merged.csv');
        // the merged file is empty
        $expected = [];
        parent::assertEquals($expected, $mergedFile->getRows());

        $receiverFile = $this->buildReceiverFile($csvTestFilesBasePath . 'receiver.csv');
        // the receiver file referer column is empty
        $expected = array(
            0 =>
                array(
                    'header1' => 'blabla',
                    'Header 2' => 'hello',
                    'Header 3' => 'test bar',
                    'Referer' => '',
                ),
            1 =>
                array(
                    'header1' => 'bla',
                    'Header 2' => 'FOO',
                    'Header 3' => 'test foo',
                    'Referer' => '',
                ),
        );
        parent::assertEquals($expected, $receiverFile->getRows());

        $hostFile = $this->buildHostFile($csvTestFilesBasePath . 'host.csv');
        // the host file referer column is valorized
        $expected = array(
            0 =>
                array(
                    'header1' => 'World',
                    'Header 2' => 'hello',
                    'Header 3' => 'bla',
                    'Header 4' => '411',
                ),
            1 =>
                array(
                    'header1' => 'bar',
                    'Header 2' => 'FOO',
                    'Header 3' => 'blabla',
                    'Header 4' => '7785',
                ),
        );
        parent::assertEquals($expected, $hostFile->getRows());
        // compare receiver file column 'header 1' to host file column 'Header 3'
        $extractor = new Extractor('header1', 'Header 3');
        $processor = new Processor();
        $mappingMigration = [
            // migrate host file column 'Header 4' value to -> receiver file column 'Referer'
            'Header 4' => 'Referer'
        ];
        $configHeaderValidator = $this->buildConfigHeaderValidator($receiverFile, $hostFile, __DIR__ . '/configFiles/config.yaml');
        $mergedFile->create($receiverFile, $hostFile, $processor, $extractor, $mappingMigration, $configHeaderValidator, $this->logger);
        // the merged file contains data from receiver file
        // and the referer column was valorized from host file data
        $expected = array(
            0 =>
                array(
                    'header1' => 'blabla', // = host file 'Header 3' and = receiver file 'header1'
                    'Header 2' => 'hello',
                    'Header 3' => 'test bar',
                    'Referer' => '7785', // = host file 'Header 4'
                ),
            1 =>
                array(
                    'header1' => 'bla', // = host file 'Header 3' and = receiver file 'header1'
                    'Header 2' => 'FOO',
                    'Header 3' => 'test foo',
                    'Referer' => '411', // = host file 'Header 4'
                ),
        );
        $mergedFileForAssertion = $this->buildMergedFile($csvTestFilesBasePath . 'merged.csv');
        parent::assertEquals($expected, $mergedFileForAssertion->getRows());
    }

    public function testCreateWithExtractorWithSuccessor()
    {
        $csvTestFilesBasePath = __DIR__ . '/csvFiles/';
        // we have to empty the file for the purposes of the test
        file_put_contents($csvTestFilesBasePath . 'merged.csv', '');

        $mergedFile = $this->buildMergedFile($csvTestFilesBasePath . 'merged.csv');
        // the merged file is empty
        $expected = [];
        parent::assertEquals($expected, $mergedFile->getRows());

        $receiverFile = $this->buildReceiverFile($csvTestFilesBasePath . 'receiver.csv');
        // the receiver file referer column is empty
        $expected = array(
            0 =>
                array(
                    'header1' => 'blabla',
                    'Header 2' => 'hello',
                    'Header 3' => 'test bar',
                    'Referer' => '',
                ),
            1 =>
                array(
                    'header1' => 'bla',
                    'Header 2' => 'FOO',
                    'Header 3' => 'test foo',
                    'Referer' => '',
                ),
        );
        parent::assertEquals($expected, $receiverFile->getRows());

        $hostFile = $this->buildHostFile($csvTestFilesBasePath . 'hostWithSuccessor.csv');
        // the host file referer column is valorized
        $expected = array(
            0 =>
                array(
                    'header1' => 'World',
                    'Header 2' => 'hello',
                    'Header 3' => 'bla',
                    'Header 4' => '411',
                ),
            1 =>
                array(
                    'header1' => 'bar',
                    'Header 2' => 'FOO',
                    'Header 3' => 'test',
                    'Header 4' => '77',
                ),
            2 =>
                array(
                    'header1' => 'bar',
                    'Header 2' => 'blabla',
                    'Header 3' => 'Ipsum',
                    'Header 4' => '7785',
                ),
        );
        parent::assertEquals($expected, $hostFile->getRows());
        // compare receiver file column 'header 1' to host file column 'Header 3'
        $extractor = new Extractor('header1', 'Header 3');
        $successorExtractor = new Extractor('header1', 'Header 2');
        $extractor->setSuccessor($successorExtractor);
        $processor = new Processor();
        $mappingMigration = [
            // migrate host file column 'Header 4' value to -> receiver file column 'Referer'
            'Header 4' => 'Referer'
        ];
        $configHeaderValidator = $this->buildConfigHeaderValidator($receiverFile, $hostFile, __DIR__ . '/configFiles/config.yaml');
        $mergedFile->create($receiverFile, $hostFile, $processor, $extractor, $mappingMigration, $configHeaderValidator, $this->logger);
        // the merged file contains data from receiver file
        // and the referer column was valorized from host file data
        $expected = array(
            0 =>
                array(
                    'header1' => 'blabla', // = host file 'Header 3' and = receiver file 'header1'
                    'Header 2' => 'hello',
                    'Header 3' => 'test bar',
                    'Referer' => '7785', // = host file 'Header 2' (host file 'Header 4' is not matching so we use the other extractor)
                ),
            1 =>
                array(
                    'header1' => 'bla', // = host file 'Header 3' and = receiver file 'header1'
                    'Header 2' => 'FOO',
                    'Header 3' => 'test foo',
                    'Referer' => '411', // = host file 'Header 4'
                ),
        );
        $mergedFileForAssertion = $this->buildMergedFile($csvTestFilesBasePath . 'merged.csv');
        parent::assertEquals($expected, $mergedFileForAssertion->getRows());
    }

    /**
     * @param string $fileName
     * @return MergedFile
     * @throws \Hj\Exception\FileNotFoundException
     */
    private function buildMergedFile(string $fileName)
    {
        return new MergedFile(
            $fileName,
            new Csv(),
            []
        );
    }

    /**
     * @param string $fileName
     * @return ReceiverFile
     * @throws \Hj\Exception\FileNotFoundException
     */
    private function buildReceiverFile(string $fileName)
    {
        return new ReceiverFile(
            $fileName,
            new Csv()
        );
    }

    /**
     * @param string $fileName
     * @return HostFile
     * @throws \Hj\Exception\FileNotFoundException
     */
    private function buildHostFile(string $fileName)
    {
        return new HostFile(
            $fileName,
            new Csv()
        );
    }

    /**
     * @param $receiverFile
     * @param $hostFile
     * @param $configFilePath
     * @return ConfigHeaderValidator
     */
    private function buildConfigHeaderValidator($receiverFile, $hostFile, $configFilePath)
    {
        $loader = new YamlConfigLoader($configFilePath, new ConfigFileValidator());

        return new ConfigHeaderValidator(
          $receiverFile,
            $hostFile,
            $loader,
            $this->logger
        );
    }
}